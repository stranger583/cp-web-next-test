name: Create Weekly Auto Merge Branch (Refactored)

on:
  schedule:
    # Run at 8:00 AM UTC+8 (00:00 UTC) every Thursday
    - cron: "0 0 * * 4"
  workflow_dispatch:

env:
  CLICKUP_API_TOKEN: ${{ secrets.CLICKUP_API_TOKEN }}
  CLICKUP_LIST_ID: ${{ secrets.CLICKUP_LIST_ID }}
  REPOSITORY_NAME: "cp-web-next-test"
  BRANCH_PREFIX_BETA: "beta/sprint"
  BRANCH_PREFIX_DELTA: "delta/sprint"
  MAX_RETRY_ATTEMPTS: 3

jobs:
  create_and_merge_branches:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: "master"
          fetch-depth: 0

      - name: Setup Git and Environment
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

          # Set up common variables
          YEAR=$(date +'%y')
          WEEK=$(date +'%V')
          BETA_BRANCH="$BRANCH_PREFIX_BETA-${YEAR}${WEEK}-auto"
          DELTA_BRANCH="$BRANCH_PREFIX_DELTA-${YEAR}${WEEK}-auto"

          echo "YEAR=$YEAR" >> $GITHUB_ENV
          echo "WEEK=$WEEK" >> $GITHUB_ENV
          echo "BETA_BRANCH=$BETA_BRANCH" >> $GITHUB_ENV
          echo "DELTA_BRANCH=$DELTA_BRANCH" >> $GITHUB_ENV

          echo "üìÖ Beta branch: $BETA_BRANCH"
          echo "üìÖ Delta branch: $DELTA_BRANCH"

          # Common functions
          cat << 'FUNCTIONS' > /tmp/common_functions.sh

          # Fetch tasks from ClickUp API
          fetch_clickup_tasks() {
            local status="$1"
            local output_file="$2"
            
            echo "üì° Fetching $status tasks from ClickUp API..."
            
            local http_code
            http_code=$(curl -w "%{http_code}" -s --max-time 30 \
              -H "Authorization: $CLICKUP_API_TOKEN" \
              -H "Content-Type: application/json" \
              -o "$output_file" \
              "https://api.clickup.com/api/v2/list/$CLICKUP_LIST_ID/task?statuses[]=$status")
            
            if [ "$http_code" != "200" ]; then
              echo "::error::‚ùå ClickUp API request failed with HTTP status: $http_code"
              [ -f "$output_file" ] && cat "$output_file"
              return 1
            fi
            
            if ! jq empty "$output_file" 2>/dev/null; then
              echo "::error::‚ùå Invalid JSON response from ClickUp API"
              cat "$output_file"
              return 1
            fi
            
            echo "‚úÖ Successfully fetched $status tasks"
            return 0
          }

          # Parse tasks and return task-branch pairs
          parse_tasks() {
            local input_file="$1"
            local status="$2"
            
            jq -r ".tasks[] | 
            select(
              .status.status == \"$status\" and 
              (.custom_fields[] | select(.name == \"Repository\") | .value) == \"$REPOSITORY_NAME\"
            ) | 
            (.custom_fields[] | select(.name == \"Branch\") | .value) as \$branch |
            select(\$branch != null and \$branch != \"\") |
            \"\(.name)\t\(\$branch)\t\(.id)\"" "$input_file" | sort
          }

          # Clean up git state
          cleanup_git() {
            git merge --abort 2>/dev/null || true
            git clean -fd 2>/dev/null || true
          }

          # Merge a single task branch
          merge_task_branch() {
            local task_name="$1"
            local branch_name="$2"
            local task_type="$3"
            
            echo "üì¶ Processing $task_type task: $task_name"
            echo "   Branch: $branch_name"
            
            # Check if branch exists remotely
            if ! git ls-remote --exit-code --heads origin "$branch_name" >/dev/null 2>&1; then
              echo "‚ùå Branch $branch_name not found remotely"
              echo "::warning::Branch not found for $task_type task: $task_name"
              return 1
            fi
            
            echo "‚úÖ Branch exists remotely"
            
            # Fetch the latest version
            if ! git fetch origin "$branch_name" 2>/dev/null; then
              echo "‚ùå Failed to fetch branch $branch_name"
              return 1
            fi
            
            echo "üì• Fetched latest version"
            
            # Check if there are changes to merge
            if ! git merge-tree $(git merge-base HEAD "origin/$branch_name") HEAD "origin/$branch_name" | grep -q .; then
              echo "‚ÑπÔ∏è No changes to merge (already up to date)"
              return 0
            fi
            
            echo "üîÑ Changes detected, performing squash merge..."
            
            # Perform squash merge
            if ! git merge "origin/$branch_name" --squash --no-edit; then
              echo "‚ùå Merge conflict detected for $task_type $branch_name"
              echo "::error::Merge conflict detected for $task_type task: $task_name (branch: $branch_name)"
              cleanup_git
              return 1
            fi
            
            # Check if there are changes to commit
            if ! git diff --cached --quiet; then
              if git commit -m "feat: merge $task_type $branch_name"; then
                echo "‚úÖ Successfully squash merged $task_type $branch_name"
                return 0
              else
                echo "‚ùå Failed to commit squash merge for $task_type $branch_name"
                cleanup_git
                return 1
              fi
            else
              echo "‚ÑπÔ∏è No changes to commit (already up to date)"
              return 0
            fi
          }

          # Process multiple tasks
          process_tasks() {
            local task_data="$1"
            local task_type="$2"
            local target_branch="$3"
            
            if [ -z "$task_data" ]; then
              echo "‚ÑπÔ∏è No $task_type tasks found for $REPOSITORY_NAME repository"
              echo "0:0:0"
              return 0
            fi
            
            local total_tasks merged_count=0
            total_tasks=$(echo "$task_data" | wc -l)
            local failed_tasks=()
            
            echo "üéØ Found $total_tasks $task_type tasks for $REPOSITORY_NAME:"
            while IFS=$'\t' read -r task_name branch_name task_id; do
              echo "  üìã $task_name (Branch: $branch_name)"
            done <<< "$task_data"
            
            echo "üöÄ Starting $task_type merge process for $total_tasks tasks..."
            
            # Ensure we're on the correct branch
            if ! git checkout "$target_branch"; then
              echo "::error::‚ùå Failed to checkout $task_type branch $target_branch"
              return 1
            fi
            
            # Process each task using here-string to avoid subshell issues
            while IFS=$'\t' read -r task_name branch_name task_id; do
              if [ -n "$task_name" ] && [ -n "$branch_name" ]; then
                if merge_task_branch "$task_name" "$branch_name" "$task_type"; then
                  merged_count=$((merged_count + 1))
                else
                  failed_tasks+=("$task_name ($branch_name)")
                fi
              fi
            done <<< "$task_data"
            
            # Generate summary
            echo "üìä $task_type Merge Summary:"
            echo "   Total tasks: $total_tasks"
            echo "   Successfully merged: $merged_count"
            echo "   Failed: ${#failed_tasks[@]}"
            
            # Report failed tasks
            if [ ${#failed_tasks[@]} -gt 0 ]; then
              echo "‚ùå Failed $task_type tasks:"
              for task in "${failed_tasks[@]}"; do
                echo "   $task"
              done
            fi
            
            # Push changes if successful merges
            if [ $merged_count -gt 0 ]; then
              echo "üì§ Pushing $merged_count successful $task_type merges..."
              if git push origin "$target_branch"; then
                echo "‚úÖ Successfully pushed all $task_type changes"
              else
                echo "::error::‚ùå Failed to push $task_type changes"
                return 1
              fi
            else
              echo "‚ö†Ô∏è No $task_type changes to push"
            fi
            
            # Return results
            echo "$merged_count:$total_tasks:${#failed_tasks[@]}"
          }
          FUNCTIONS

          source /tmp/common_functions.sh

      - name: Create Beta Branch
        id: create_beta
        run: |
          echo "üìÖ Creating beta branch: $BETA_BRANCH"

          if git ls-remote --exit-code --heads origin $BETA_BRANCH; then
            echo "‚ö†Ô∏è Beta branch $BETA_BRANCH already exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚ú® Creating new beta branch: $BETA_BRANCH"
            git checkout -b $BETA_BRANCH
            git push origin $BETA_BRANCH
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

          echo "branch_name=$BETA_BRANCH" >> $GITHUB_OUTPUT

      - name: Process Beta Tasks
        id: process_beta
        run: |
          source /tmp/common_functions.sh

          echo "üöÄ Starting beta task processing..."
          echo "üîç Debug: BETA_BRANCH = '$BETA_BRANCH'"

          # Fetch beta tasks
          if ! fetch_clickup_tasks "beta" "/tmp/clickup_beta_response.json"; then
            echo "process_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Parse beta tasks
          BETA_TASK_DATA=$(parse_tasks "/tmp/clickup_beta_response.json" "beta")
          echo "üîç Debug: BETA_TASK_DATA = '$BETA_TASK_DATA'"

          # Check if we have tasks
          if [ -z "$BETA_TASK_DATA" ]; then
            echo "‚ö†Ô∏è No beta tasks found, setting default values"
            echo "merged_count=0" >> $GITHUB_OUTPUT
            echo "total_tasks=0" >> $GITHUB_OUTPUT
            echo "failed_count=0" >> $GITHUB_OUTPUT
            echo "all_tasks_merged=false" >> $GITHUB_OUTPUT
            echo "process_success=true" >> $GITHUB_OUTPUT
            echo "has_tasks=false" >> $GITHUB_OUTPUT
            
            {
              echo "### Beta Tasks Processing Summary"
              echo "- **Total beta tasks:** 0"
              echo "- **Successfully merged:** 0"
              echo "- **Failed:** 0"
              echo "- **Status:** ‚ö†Ô∏è No tasks to process"
            } >> "$GITHUB_STEP_SUMMARY"
            
            rm -f /tmp/clickup_beta_response.json
            exit 0
          fi

          # Process beta tasks
          echo "üîç Debug: Calling process_tasks with: '$BETA_TASK_DATA'"
          BETA_RESULT=$(process_tasks "$BETA_TASK_DATA" "beta" "$BETA_BRANCH")
          echo "üîç Debug: BETA_RESULT = '$BETA_RESULT'"

          # Parse results
          IFS=':' read -r merged_count total_tasks failed_count <<< "$BETA_RESULT"
          echo "üîç Debug: parsed merged_count='$merged_count', total_tasks='$total_tasks', failed_count='$failed_count'"

          # Validate parsed values
          if [ -z "$merged_count" ] || [ -z "$total_tasks" ] || [ -z "$failed_count" ]; then
            echo "‚ùå Error: Failed to parse BETA_RESULT properly"
            echo "üîç Debug: merged_count='$merged_count', total_tasks='$total_tasks', failed_count='$failed_count'"
            echo "process_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Set outputs
          echo "merged_count=$merged_count" >> $GITHUB_OUTPUT
          echo "total_tasks=$total_tasks" >> $GITHUB_OUTPUT
          echo "failed_count=$failed_count" >> $GITHUB_OUTPUT
          echo "all_tasks_merged=$([[ $merged_count -eq $total_tasks && $total_tasks -gt 0 ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "process_success=$([[ $failed_count -eq 0 || $merged_count -gt 0 ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "has_tasks=$([[ $total_tasks -gt 0 ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

          # Add to step summary
          {
            echo "### Beta Tasks Processing Summary"
            echo "- **Total beta tasks:** $total_tasks"
            echo "- **Successfully merged:** $merged_count"
            echo "- **Failed:** $failed_count"
            echo "- **Status:** $([[ $merged_count -eq $total_tasks && $total_tasks -gt 0 ]] && echo "‚úÖ All tasks merged" || echo "‚ö†Ô∏è Partial success or no tasks")"
          } >> "$GITHUB_STEP_SUMMARY"

          # Clean up
          rm -f /tmp/clickup_beta_response.json

      - name: Create Delta Branch
        id: create_delta
        if: steps.process_beta.outputs.all_tasks_merged == 'true'
        run: |
          echo "üéâ All beta tasks successfully merged! Creating delta branch..."
          echo "   Source branch: $BETA_BRANCH"
          echo "   Delta branch: $DELTA_BRANCH"

          if git ls-remote --exit-code --heads origin $DELTA_BRANCH; then
            echo "‚ö†Ô∏è Delta branch $DELTA_BRANCH already exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
            echo "branch_created=false" >> $GITHUB_OUTPUT
          else
            echo "‚ú® Creating new delta branch: $DELTA_BRANCH"
            
            # Ensure we're on the beta branch with latest changes
            git checkout $BETA_BRANCH
            git pull origin $BETA_BRANCH
            
            # Create and push delta branch
            if git checkout -b $DELTA_BRANCH && git push origin $DELTA_BRANCH; then
              echo "üöÄ Successfully created and pushed delta branch"
              echo "branch_exists=false" >> $GITHUB_OUTPUT
              echo "branch_created=true" >> $GITHUB_OUTPUT
              
              {
                echo "### üéâ Delta Branch Created"
                echo "- **Branch Name:** \`$DELTA_BRANCH\`"
                echo "- **Source:** \`$BETA_BRANCH\`"
                echo "- **Status:** ‚úÖ Ready for deployment"
              } >> $GITHUB_STEP_SUMMARY
            else
              echo "::error::‚ùå Failed to create delta branch"
              echo "branch_created=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

          echo "branch_name=$DELTA_BRANCH" >> $GITHUB_OUTPUT

      - name: Process Delta Tasks
        id: process_delta
        if: steps.create_delta.outputs.branch_created == 'true' || steps.create_delta.outputs.branch_exists == 'true'
        run: |
          source /tmp/common_functions.sh

          echo "üöÄ Starting delta task processing..."

          # Use existing delta branch or the one we just created
          DELTA_BRANCH_NAME="${{ steps.create_delta.outputs.branch_name }}"
          echo "üîç Debug: DELTA_BRANCH_NAME = '$DELTA_BRANCH_NAME'"

          # Fetch delta tasks
          if ! fetch_clickup_tasks "delta" "/tmp/clickup_delta_response.json"; then
            echo "process_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Parse delta tasks
          DELTA_TASK_DATA=$(parse_tasks "/tmp/clickup_delta_response.json" "delta")
          echo "üîç Debug: DELTA_TASK_DATA = '$DELTA_TASK_DATA'"

          # Check if we have tasks
          if [ -z "$DELTA_TASK_DATA" ]; then
            echo "‚ö†Ô∏è No delta tasks found, setting default values"
            echo "merged_count=0" >> $GITHUB_OUTPUT
            echo "total_tasks=0" >> $GITHUB_OUTPUT
            echo "failed_count=0" >> $GITHUB_OUTPUT
            echo "all_tasks_merged=false" >> $GITHUB_OUTPUT
            echo "process_success=true" >> $GITHUB_OUTPUT
            echo "has_tasks=false" >> $GITHUB_OUTPUT
            
            {
              echo "### Delta Tasks Processing Summary"
              echo "- **Total delta tasks:** 0"
              echo "- **Successfully merged:** 0"
              echo "- **Failed:** 0"
              echo "- **Status:** ‚ö†Ô∏è No tasks to process"
            } >> "$GITHUB_STEP_SUMMARY"
            
            rm -f /tmp/clickup_delta_response.json
            exit 0
          fi

          # Process delta tasks
          echo "üîç Debug: Calling process_tasks with: '$DELTA_TASK_DATA'"
          DELTA_RESULT=$(process_tasks "$DELTA_TASK_DATA" "delta" "$DELTA_BRANCH_NAME")
          echo "üîç Debug: DELTA_RESULT = '$DELTA_RESULT'"

          # Parse results
          IFS=':' read -r merged_count total_tasks failed_count <<< "$DELTA_RESULT"
          echo "üîç Debug: parsed merged_count='$merged_count', total_tasks='$total_tasks', failed_count='$failed_count'"

          # Validate parsed values
          if [ -z "$merged_count" ] || [ -z "$total_tasks" ] || [ -z "$failed_count" ]; then
            echo "‚ùå Error: Failed to parse DELTA_RESULT properly"
            echo "üîç Debug: merged_count='$merged_count', total_tasks='$total_tasks', failed_count='$failed_count'"
            echo "process_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Set outputs
          echo "merged_count=$merged_count" >> $GITHUB_OUTPUT
          echo "total_tasks=$total_tasks" >> $GITHUB_OUTPUT
          echo "failed_count=$failed_count" >> $GITHUB_OUTPUT
          echo "all_tasks_merged=$([[ $merged_count -eq $total_tasks && $total_tasks -gt 0 ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "process_success=$([[ $failed_count -eq 0 || $merged_count -gt 0 ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "has_tasks=$([[ $total_tasks -gt 0 ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

          # Add to step summary
          {
            echo "### Delta Tasks Processing Summary"
            echo "- **Total delta tasks:** $total_tasks"
            echo "- **Successfully merged:** $merged_count"
            echo "- **Failed:** $failed_count"
            echo "- **Status:** $([[ $merged_count -eq $total_tasks && $total_tasks -gt 0 ]] && echo "‚úÖ All tasks merged" || echo "‚ö†Ô∏è Partial success or no tasks")"
          } >> "$GITHUB_STEP_SUMMARY"

          # Clean up
          rm -f /tmp/clickup_delta_response.json

      - name: Generate Final Summary
        if: always()
        run: |
          # Collect all the status information
          BETA_HAS_TASKS="${{ steps.process_beta.outputs.has_tasks }}"
          BETA_MERGED="${{ steps.process_beta.outputs.merged_count }}"
          BETA_TOTAL="${{ steps.process_beta.outputs.total_tasks }}"
          BETA_ALL_MERGED="${{ steps.process_beta.outputs.all_tasks_merged }}"

          DELTA_CREATED="${{ steps.create_delta.outputs.branch_created }}"
          DELTA_EXISTS="${{ steps.create_delta.outputs.branch_exists }}"
          DELTA_HAS_TASKS="${{ steps.process_delta.outputs.has_tasks }}"
          DELTA_MERGED="${{ steps.process_delta.outputs.merged_count }}"
          DELTA_TOTAL="${{ steps.process_delta.outputs.total_tasks }}"

          echo "üìã Final Status Summary:"
          echo "   Beta branch: $BETA_BRANCH"
          echo "   Delta branch: $DELTA_BRANCH"
          echo "   Beta tasks: $BETA_MERGED/$BETA_TOTAL"
          echo "   Delta tasks: $DELTA_MERGED/$DELTA_TOTAL"

          # Generate comprehensive summary
          {
            echo "## üìä Weekly Branch Creation Summary"
            echo ""
            echo "**üîµ Beta Branch:** \`$BETA_BRANCH\`"
            
            if [ "$DELTA_CREATED" = "true" ] || [ "$DELTA_EXISTS" = "true" ]; then
              echo "**üü° Delta Branch:** \`$DELTA_BRANCH\`"
            fi
            
            echo ""
            
            # Determine overall status
            if [ "$BETA_HAS_TASKS" = "false" ] && [ "$DELTA_HAS_TASKS" = "false" ]; then
              echo "‚úÖ **Status:** No tasks to process (normal situation)"
            elif [ "$BETA_ALL_MERGED" = "true" ] && [ "$DELTA_CREATED" = "true" ]; then
              echo "üéâ **Status:** Perfect! All beta tasks merged, delta branch created"
              if [ "$DELTA_HAS_TASKS" = "true" ]; then
                echo "üöÄ **Bonus:** Delta tasks also processed ($DELTA_MERGED/$DELTA_TOTAL)"
              fi
            elif [ "$BETA_ALL_MERGED" = "true" ]; then
              echo "‚úÖ **Status:** All beta tasks merged successfully"
            elif [ "$BETA_HAS_TASKS" = "true" ] && [ "${BETA_MERGED:-0}" -gt 0 ]; then
              echo "‚ö†Ô∏è **Status:** Partial beta success ($BETA_MERGED/$BETA_TOTAL tasks merged)"
            elif [ "$DELTA_HAS_TASKS" = "true" ] && [ "${DELTA_MERGED:-0}" -gt 0 ]; then
              echo "‚ö†Ô∏è **Status:** Delta tasks processed ($DELTA_MERGED/$DELTA_TOTAL tasks merged)"
            else
              echo "‚ùå **Status:** Task processing failed"
            fi
            
            echo ""
            echo "**üïê Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            
            echo ""
            echo "---"
            echo "### üìà Statistics"
            echo "| Branch Type | Tasks Found | Successfully Merged | Success Rate |"
            echo "|-------------|-------------|---------------------|--------------|"
            echo "| Beta | ${BETA_TOTAL:-0} | ${BETA_MERGED:-0} | $([[ ${BETA_TOTAL:-0} -gt 0 ]] && echo "$(( (${BETA_MERGED:-0} * 100) / ${BETA_TOTAL:-0} ))%" || echo "N/A") |"
            if [ "$DELTA_HAS_TASKS" = "true" ]; then
              echo "| Delta | ${DELTA_TOTAL:-0} | ${DELTA_MERGED:-0} | $([[ ${DELTA_TOTAL:-0} -gt 0 ]] && echo "$(( (${DELTA_MERGED:-0} * 100) / ${DELTA_TOTAL:-0} ))%" || echo "N/A") |"
            fi
          } >> $GITHUB_STEP_SUMMARY

          # Clean up temporary files
          rm -f /tmp/common_functions.sh

          # Determine final exit code
          BETA_SUCCESS="${{ steps.process_beta.outputs.process_success }}"
          DELTA_SUCCESS="${{ steps.process_delta.outputs.process_success }}"

          if [ "$BETA_HAS_TASKS" = "true" ] && [ "$BETA_SUCCESS" = "false" ]; then
            echo "::error::‚ùå Beta task processing failed"
            exit 1
          elif [ "$DELTA_HAS_TASKS" = "true" ] && [ "$DELTA_SUCCESS" = "false" ]; then
            echo "::error::‚ùå Delta task processing failed"
            exit 1
          else
            echo "‚úÖ Workflow completed successfully"
            exit 0
          fi
