name: Create Weekly Beta Branch

on:
  schedule:
    # Run at 8:00 AM UTC+8 (00:00 UTC) every Monday
    - cron: "0 0 * * 1"
  workflow_dispatch: # Allow manual triggering if needed

env:
  CLICKUP_API_TOKEN: ${{ secrets.CLICKUP_API_TOKEN }}
  CLICKUP_LIST_ID: ${{ secrets.CLICKUP_LIST_ID }}

jobs:
  create_branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: "master"
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Create new branch
        id: create_branch
        run: |
          YEAR=$(date +'%y')
          WEEK=$(date +'%V')
          BRANCH_NAME="beta/sprint-$YEAR$WEEK-auto"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Branch name will be: $BRANCH_NAME"

          # Create and push the new branch
          if git ls-remote --exit-code --heads origin $BRANCH_NAME; then
            echo "Branch $BRANCH_NAME already exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Branch $BRANCH_NAME does not exist. Creating it."
            git checkout -b $BRANCH_NAME
            git push origin $BRANCH_NAME
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Fetch ClickUp Beta Tasks
        id: fetch_tasks
        run: |
          YEAR=$(date +'%y')
          WEEK=$(date +'%V')
          BRANCH_NAME="beta/sprint-$YEAR$WEEK-auto"

          # Fetch tasks from ClickUp API with beta status
          RESPONSE=$(curl -s -H "Authorization: $CLICKUP_API_TOKEN" \
            "https://api.clickup.com/api/v2/list/$CLICKUP_LIST_ID/task?statuses[]=beta")

          echo "API Response received"

          # Parse tasks and filter for:
          # 1. status = "beta"
          # 2. repository = "cp-web-next-test"
          # 3. has branch information
          # Extract task names and branches directly
          TASK_NAMES=$(echo "$RESPONSE" | jq -r '.tasks[] | 
            select(
              .status.status == "beta" and 
              (.custom_fields[] | select(.name == "Repository") | .value) == "cp-web-next-test" and
              (.custom_fields[] | select(.name == "Branch") | .value) != null and
              (.custom_fields[] | select(.name == "Branch") | .value) != ""
            ) | .name')

          BRANCH_NAMES=$(echo "$RESPONSE" | jq -r '.tasks[] | 
            select(
              .status.status == "beta" and 
              (.custom_fields[] | select(.name == "Repository") | .value) == "cp-web-next-test" and
              (.custom_fields[] | select(.name == "Branch") | .value) != null and
              (.custom_fields[] | select(.name == "Branch") | .value) != ""
            ) | (.custom_fields[] | select(.name == "Branch") | .value)')

          if [ -z "$TASK_NAMES" ]; then
            echo "No beta tasks found for cp-web-next-test repository"
            echo "has_tasks=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "Found beta tasks for cp-web-next-test:"
            echo "Task names: $TASK_NAMES"
            echo "Branch names: $BRANCH_NAMES"
            echo "has_tasks=true" >> $GITHUB_OUTPUT
            # Store as simple strings
            echo "task_names<<EOF" >> $GITHUB_OUTPUT
            echo "$TASK_NAMES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "branch_names<<EOF" >> $GITHUB_OUTPUT
            echo "$BRANCH_NAMES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Merge Beta Tasks
        if: steps.fetch_tasks.outputs.has_tasks == 'true'
        run: |
          YEAR=$(date +'%y')
          WEEK=$(date +'%V')
          BRANCH_NAME="beta/sprint-$YEAR$WEEK-auto"

          # Checkout the auto-created branch
          git checkout $BRANCH_NAME

          # Read task names and branch names into arrays
          readarray -t TASK_ARRAY <<< "${{ steps.fetch_tasks.outputs.task_names }}"
          readarray -t BRANCH_ARRAY <<< "${{ steps.fetch_tasks.outputs.branch_names }}"

          # Process each task and branch
          for i in "${!TASK_ARRAY[@]}"; do
            task_name="${TASK_ARRAY[$i]}"
            branch_name="${BRANCH_ARRAY[$i]}"
            
            if [ -n "$task_name" ] && [ -n "$branch_name" ]; then
              echo "Processing task: $task_name with branch: $branch_name"
              
              # Check if branch exists
              if git ls-remote --exit-code --heads origin "$branch_name"; then
                echo "Merging $branch_name into $BRANCH_NAME"
                
                # Try to merge the branch
                if git merge "origin/$branch_name" --no-edit; then
                  echo "Successfully merged $branch_name"
                else
                  echo "Merge conflict detected for $branch_name"
                  echo "::error::Merge conflict detected for task: $task_name (branch: $branch_name)"
                  git merge --abort
                  exit 1
                fi
              else
                echo "Branch $branch_name not found for task: $task_name"
                echo "::error::Branch not found for task: $task_name"
                exit 1
              fi
            fi
          done

          # Push the merged changes
          git push origin $BRANCH_NAME

      - name: Handle No Tasks Error
        if: steps.fetch_tasks.outputs.has_tasks == 'false'
        run: |
          echo "::error::No beta tasks found for cp-web-next-test repository. Please check ClickUp list configuration."
          exit 1
