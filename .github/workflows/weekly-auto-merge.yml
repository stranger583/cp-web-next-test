name: Create Weekly Auto Merge Branch TEST

on:
  schedule:
    # Run at 8:00 AM UTC+8 (00:00 UTC) every Thursday
    - cron: "0 0 * * 4"
  workflow_dispatch:

env:
  CLICKUP_API_TOKEN: ${{ secrets.CLICKUP_API_TOKEN }}
  CLICKUP_LIST_ID: ${{ secrets.CLICKUP_LIST_ID }}
  REPOSITORY_NAME: "cp-web-next-test"
  BRANCH_PREFIX_BETA: "beta/sprint"
  BRANCH_PREFIX_DELTA: "delta/sprint"
  MAX_RETRY_ATTEMPTS: 3

jobs:
  create_and_merge_branches:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: "master"
          fetch-depth: 0

      - name: Setup Git and Environment
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

          # Set up common variables
          YEAR=$(date +'%y')
          WEEK=$(date +'%V')
          BETA_BRANCH="$BRANCH_PREFIX_BETA-${YEAR}${WEEK}-auto"
          DELTA_BRANCH="$BRANCH_PREFIX_DELTA-${YEAR}${WEEK}-auto"

          echo "YEAR=$YEAR" >> $GITHUB_ENV
          echo "WEEK=$WEEK" >> $GITHUB_ENV
          echo "BETA_BRANCH=$BETA_BRANCH" >> $GITHUB_ENV
          echo "DELTA_BRANCH=$DELTA_BRANCH" >> $GITHUB_ENV

          echo "📅 Beta branch: $BETA_BRANCH"
          echo "📅 Delta branch: $DELTA_BRANCH"

          # Common functions
          cat << 'FUNCTIONS' > /tmp/common_functions.sh

          # Fetch tasks from ClickUp API
          fetch_clickup_tasks() {
            local status="$1"
            local output_file="$2"
            
            echo "📡 Fetching $status tasks from ClickUp API..." >&2
            
            local http_code
            http_code=$(curl -w "%{http_code}" -s --max-time 30 \
              -H "Authorization: $CLICKUP_API_TOKEN" \
              -H "Content-Type: application/json" \
              -o "$output_file" \
              "https://api.clickup.com/api/v2/list/$CLICKUP_LIST_ID/task?statuses[]=$status")
            
            if [ "$http_code" != "200" ]; then
              echo "::error::❌ ClickUp API request failed with HTTP status: $http_code" >&2
              [ -f "$output_file" ] && cat "$output_file" >&2
              return 1
            fi
            
            if ! jq empty "$output_file" 2>/dev/null; then
              echo "::error::❌ Invalid JSON response from ClickUp API" >&2
              cat "$output_file" >&2
              return 1
            fi
            
            echo "✅ Successfully fetched $status tasks" >&2
            return 0
          }

          # Parse tasks and return task-branch pairs
          parse_tasks() {
            local input_file="$1"
            local status="$2"
            
            jq -r ".tasks[] | 
            select(
              .status.status == \"$status\" and 
              (.custom_fields[] | select(.name == \"Repository\") | .value) == \"$REPOSITORY_NAME\"
            ) | 
            (.custom_fields[] | select(.name == \"Branch\") | .value) as \$branch |
            select(\$branch != null and \$branch != \"\") |
            \"\(.name)\t\(\$branch)\t\(.id)\"" "$input_file" | sort
          }

          # Clean up git state
          cleanup_git() {
            git merge --abort 2>/dev/null || true
            git clean -fd 2>/dev/null || true
          }

          # Merge a single task branch
          merge_task_branch() {
            local task_name="$1"
            local branch_name="$2"
            local task_type="$3"
            
            echo "📦 Processing $task_type task: $task_name" >&2
            echo "   Branch: $branch_name" >&2
            
            # Check if branch exists remotely
            if ! git ls-remote --exit-code --heads origin "$branch_name" >/dev/null 2>&1; then
              echo "❌ Branch $branch_name not found remotely" >&2
              echo "::warning::Branch not found for $task_type task: $task_name" >&2
              return 1
            fi
            
            echo "✅ Branch exists remotely" >&2
            
            # Fetch the latest version
            if ! git fetch origin "$branch_name" >/dev/null 2>&1; then
              echo "❌ Failed to fetch branch $branch_name" >&2
              return 1
            fi
            
            echo "📥 Fetched latest version" >&2
            
            # Check if there are changes to merge
            if ! git merge-tree $(git merge-base HEAD "origin/$branch_name") HEAD "origin/$branch_name" | grep -q .; then
              echo "ℹ️ No changes to merge (already up to date)" >&2
              return 0
            fi
            
            echo "🔄 Changes detected, performing squash merge..." >&2
            
            # Perform squash merge (redirect all output to stderr)
            if ! git merge "origin/$branch_name" --squash --no-edit >/dev/null 2>&1; then
              echo "❌ Merge conflict detected for $task_type $branch_name" >&2
              echo "::error::Merge conflict detected for $task_type task: $task_name (branch: $branch_name)" >&2
              cleanup_git
              return 1
            fi
            
            # Check if there are changes to commit
            if ! git diff --cached --quiet; then
              if git commit -m "feat: merge $task_type $branch_name" >/dev/null 2>&1; then
                echo "✅ Successfully squash merged $task_type $branch_name" >&2
                return 0
              else
                echo "❌ Failed to commit squash merge for $task_type $branch_name" >&2
                cleanup_git
                return 1
              fi
            else
              echo "ℹ️ No changes to commit (already up to date)" >&2
              return 0
            fi
          }


          # Move tag function
          move_tag_if_successful() {
            local merged_count="$1"
            local failed_count="$2"
            local tag_name="$3"
            local branch_name="$4"
            local step_name="$5"
            
            if [ $failed_count -eq 0 ] && [ $merged_count -gt 0 ]; then
              echo "🏷️ Moving $tag_name tag to current commit..."
              if yarn move-tag "$tag_name"; then
                echo "✅ Successfully moved $tag_name tag"
                echo "${step_name}_tag_moved=true" >> $GITHUB_OUTPUT
                
                {
                  echo "### 🏷️ $step_name Tag Movement"
                  echo "- **Tag:** \`$tag_name\`"
                  echo "- **Status:** ✅ Successfully moved to current commit"
                  echo "- **Branch:** \`$branch_name\`"
                } >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ Failed to move $tag_name tag"
                echo "${step_name}_tag_moved=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "⚠️ Skipping $tag_name tag movement (errors: $failed_count, merged: $merged_count)"
              echo "${step_name}_tag_moved=false" >> $GITHUB_OUTPUT
            fi
          }

          # Process multiple tasks
          process_tasks() {
            local task_data="$1"
            local task_type="$2"
            local target_branch="$3"
            
            if [ -z "$task_data" ]; then
              echo "ℹ️ No $task_type tasks found for $REPOSITORY_NAME repository" >&2
              echo "0:0:0:"
              return 0
            fi
            
            local total_tasks merged_count=0
            total_tasks=$(echo "$task_data" | wc -l)
            local failed_tasks=()
            
            echo "🎯 Found $total_tasks $task_type tasks for $REPOSITORY_NAME:" >&2
            while IFS=$'\t' read -r task_name branch_name task_id; do
              echo "  📋 $task_name (Branch: $branch_name)" >&2
            done <<< "$task_data"
            
            echo "🚀 Starting $task_type merge process for $total_tasks tasks..." >&2
            
            # Ensure we're on the correct branch
            if ! git checkout "$target_branch" >/dev/null 2>&1; then
              echo "::error::❌ Failed to checkout $task_type branch $target_branch" >&2
              return 1
            fi
            
            # Process each task using here-string to avoid subshell issues
            while IFS=$'\t' read -r task_name branch_name task_id; do
              if [ -n "$task_name" ] && [ -n "$branch_name" ]; then
                if merge_task_branch "$task_name" "$branch_name" "$task_type"; then
                  merged_count=$((merged_count + 1))
                else
                  failed_tasks+=("$task_name ($branch_name)")
                fi
              fi
            done <<< "$task_data"
            
            # Generate summary
            echo "📊 $task_type Merge Summary:" >&2
            echo "   Total tasks: $total_tasks" >&2
            echo "   Successfully merged: $merged_count" >&2
            echo "   Failed: ${#failed_tasks[@]}" >&2
            
            # Report failed tasks
            if [ ${#failed_tasks[@]} -gt 0 ]; then
              echo "❌ Failed $task_type tasks:" >&2
              for task in "${failed_tasks[@]}"; do
                echo "   $task" >&2
              done
            fi
            
            # Push changes if successful merges
            if [ $merged_count -gt 0 ]; then
              echo "📤 Pushing $merged_count successful $task_type merges..." >&2
              if git push origin "$target_branch" >/dev/null 2>&1; then
                echo "✅ Successfully pushed all $task_type changes" >&2
              else
                echo "::error::❌ Failed to push $task_type changes" >&2
                return 1
              fi
            else
              echo "⚠️ No $task_type changes to push" >&2
            fi
            
            
            # Return results - now includes failed task names
            local failed_tasks_str=""
            if [ ${#failed_tasks[@]} -gt 0 ]; then
              failed_tasks_str=$(printf "%s|" "${failed_tasks[@]}" | sed 's/|$//')
            fi
            echo "$merged_count:$total_tasks:${#failed_tasks[@]}:$failed_tasks_str"
          }
          FUNCTIONS

          source /tmp/common_functions.sh

      - name: Create Beta Branch
        id: create_beta
        run: |
          echo "📅 Creating beta branch: $BETA_BRANCH"

          if git ls-remote --exit-code --heads origin $BETA_BRANCH >/dev/null 2>&1; then
            echo "⚠️ Beta branch $BETA_BRANCH already exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "✨ Creating new beta branch: $BETA_BRANCH"
            git checkout -b $BETA_BRANCH
            git push origin $BETA_BRANCH
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

          echo "branch_name=$BETA_BRANCH" >> $GITHUB_OUTPUT

      - name: Process Beta Tasks
        id: process_beta
        run: |
          source /tmp/common_functions.sh

          echo "🚀 Starting beta task processing..."

          # Get BETA_BRANCH from environment
          BETA_BRANCH="${{ env.BETA_BRANCH }}"
          echo "🔍 Debug: BETA_BRANCH = '$BETA_BRANCH'"

          # Fetch beta tasks
          if ! fetch_clickup_tasks "beta" "/tmp/clickup_beta_response.json"; then
            echo "process_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Parse beta tasks
          BETA_TASK_DATA=$(parse_tasks "/tmp/clickup_beta_response.json" "beta")
          echo "🔍 Debug: BETA_TASK_DATA = '$BETA_TASK_DATA'"

          # Check if we have tasks
          if [ -z "$BETA_TASK_DATA" ]; then
            echo "⚠️ No beta tasks found, setting default values"
            echo "merged_count=0" >> $GITHUB_OUTPUT
            echo "total_tasks=0" >> $GITHUB_OUTPUT
            echo "failed_count=0" >> $GITHUB_OUTPUT
            echo "all_tasks_merged=true" >> $GITHUB_OUTPUT
            echo "process_success=true" >> $GITHUB_OUTPUT
            echo "has_tasks=false" >> $GITHUB_OUTPUT
            
            {
              echo "### Beta Tasks Processing Summary"
              echo "- **Total beta tasks:** 0"
              echo "- **Successfully merged:** 0"
              echo "- **Failed:** 0"
              echo "- **Status:** ⚠️ No tasks to process"
            } >> "$GITHUB_STEP_SUMMARY"
            
            rm -f /tmp/clickup_beta_response.json
            exit 0
          fi

          # Process beta tasks - CRITICAL FIX: Capture only the final result line
          echo "🔍 Debug: Calling process_tasks with: '$BETA_TASK_DATA'"
          BETA_RESULT=$(process_tasks "$BETA_TASK_DATA" "beta" "$BETA_BRANCH" | tail -1)
          echo "🔍 Debug: BETA_RESULT = '$BETA_RESULT'"

          # Parse results
          IFS=':' read -r merged_count total_tasks failed_count failed_tasks_str <<< "$BETA_RESULT"
          echo "🔍 Debug: parsed merged_count='$merged_count', total_tasks='$total_tasks', failed_count='$failed_count', failed_tasks_str='$failed_tasks_str'"

          # Validate parsed values
          if [ -z "$merged_count" ] || [ -z "$total_tasks" ] || [ -z "$failed_count" ]; then
            echo "❌ Error: Failed to parse BETA_RESULT properly"
            echo "🔍 Debug: merged_count='$merged_count', total_tasks='$total_tasks', failed_count='$failed_count'"
            echo "process_success=false" >> $GITHUB_OUTPUT        
            exit 1
          fi

          # Additional validation: ensure values are numeric
          if ! [[ "$merged_count" =~ ^[0-9]+$ ]] || ! [[ "$total_tasks" =~ ^[0-9]+$ ]] || ! [[ "$failed_count" =~ ^[0-9]+$ ]]; then
            echo "❌ Error: Parsed values are not numeric"
            echo "🔍 Debug: merged_count='$merged_count', total_tasks='$total_tasks', failed_count='$failed_count'"
            echo "process_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Set outputs
          echo "merged_count=$merged_count" >> $GITHUB_OUTPUT
          echo "total_tasks=$total_tasks" >> $GITHUB_OUTPUT
          echo "failed_count=$failed_count" >> $GITHUB_OUTPUT
          echo "failed_tasks_str=$failed_tasks_str" >> $GITHUB_OUTPUT
          echo "all_tasks_merged=$([[ $merged_count -eq $total_tasks && $total_tasks -gt 0 ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "process_success=$([[ $failed_count -eq 0 || $merged_count -gt 0 ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "has_tasks=$([[ $total_tasks -gt 0 ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

          # Add to step summary
          {
            echo "### Beta Tasks Processing Summary"
            echo "- **Total beta tasks:** $total_tasks"
            echo "- **Successfully merged:** $merged_count"
            echo "- **Failed:** $failed_count"
            echo "- **Status:** $([[ $merged_count -eq $total_tasks && $total_tasks -gt 0 ]] && echo "✅ All tasks merged" || echo "⚠️ Partial success or no tasks")"
            
            # Add failed tasks details if any
            if [ -n "$failed_tasks_str" ] && [ "$failed_count" -gt 0 ]; then
              echo ""
              echo "**❌ Failed Tasks:**"
              IFS='|' read -ra failed_tasks <<< "$failed_tasks_str"
              for task in "${failed_tasks[@]}"; do
                echo "  - $task"
              done
            fi
          } >> "$GITHUB_STEP_SUMMARY"

          # Move beta tag if no errors and at least one merge
          move_tag_if_successful "$merged_count" "$failed_count" "beta" "$BETA_BRANCH" "beta"

          # Clean up
          rm -f /tmp/clickup_beta_response.json

      - name: Notify Beta Move Tag Success
        if: steps.process_beta.outputs.beta_tag_moved == 'true'
        uses: ./.github/actions/notify-chat
        with:
          name: "Beta Move Tag Success"
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
          type: "tag_success"
          branch_type: "beta"
          branch_name: ${{ env.BETA_BRANCH }}
          merged_count: ${{ steps.process_beta.outputs.merged_count }}
          total_tasks: ${{ steps.process_beta.outputs.total_tasks }}

      - name: Notify Beta Merge Error
        if: failure() && steps.process_beta.outputs.process_success == 'false'
        uses: ./.github/actions/notify-chat
        with:
          name: "Beta Merge Error"
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
          type: "error"
          branch_type: "beta"
          branch_name: ${{ env.BETA_BRANCH }}
          failed_tasks: ${{ steps.process_beta.outputs.failed_tasks_str }}

      - name: Create Delta Branch
        id: create_delta
        if: steps.process_beta.outputs.process_success == 'true' && (steps.process_beta.outputs.all_tasks_merged == 'true' || steps.process_beta.outputs.has_tasks == 'false')
        run: |
          echo "🎉 All beta tasks successfully merged! Creating delta branch..."
          echo "   Source branch: $BETA_BRANCH"
          echo "   Delta branch: $DELTA_BRANCH"

          if git ls-remote --exit-code --heads origin $DELTA_BRANCH >/dev/null 2>&1; then
            echo "⚠️ Delta branch $DELTA_BRANCH already exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
            echo "branch_created=false" >> $GITHUB_OUTPUT
          else
            echo "✨ Creating new delta branch: $DELTA_BRANCH"
            
            # Ensure we're on the beta branch with latest changes
            git checkout $BETA_BRANCH
            git pull origin $BETA_BRANCH
            
            # Create and push delta branch
            if git checkout -b $DELTA_BRANCH && git push origin $DELTA_BRANCH; then
              echo "🚀 Successfully created and pushed delta branch"
              echo "branch_exists=false" >> $GITHUB_OUTPUT
              echo "branch_created=true" >> $GITHUB_OUTPUT
              
              {
                echo "### 🎉 Delta Branch Created"
                echo "- **Branch Name:** \`$DELTA_BRANCH\`"
                echo "- **Source:** \`$BETA_BRANCH\`"
                echo "- **Status:** ✅ Ready for deployment"
              } >> $GITHUB_STEP_SUMMARY
            else
              echo "::error::❌ Failed to create delta branch"
              echo "branch_created=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

          echo "branch_name=$DELTA_BRANCH" >> $GITHUB_OUTPUT

      - name: Process Delta Tasks
        id: process_delta
        if: steps.create_delta.outputs.branch_created == 'true' || steps.create_delta.outputs.branch_exists == 'true'
        run: |
          source /tmp/common_functions.sh

          echo "🚀 Starting delta task processing..."

          # Get DELTA_BRANCH from environment
          DELTA_BRANCH="${{ env.DELTA_BRANCH }}"
          echo "🔍 Debug: DELTA_BRANCH = '$DELTA_BRANCH'"

          # Use existing delta branch or the one we just created
          DELTA_BRANCH_NAME="${{ steps.create_delta.outputs.branch_name }}"
          echo "🔍 Debug: DELTA_BRANCH_NAME = '$DELTA_BRANCH_NAME'"

          # Fetch delta tasks
          if ! fetch_clickup_tasks "delta" "/tmp/clickup_delta_response.json"; then
            echo "process_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Parse delta tasks
          DELTA_TASK_DATA=$(parse_tasks "/tmp/clickup_delta_response.json" "delta")
          echo "🔍 Debug: DELTA_TASK_DATA = '$DELTA_TASK_DATA'"

          # Check if we have tasks
          if [ -z "$DELTA_TASK_DATA" ]; then
            echo "⚠️ No delta tasks found, setting default values"
            echo "merged_count=0" >> $GITHUB_OUTPUT
            echo "total_tasks=0" >> $GITHUB_OUTPUT
            echo "failed_count=0" >> $GITHUB_OUTPUT
            echo "all_tasks_merged=false" >> $GITHUB_OUTPUT
            echo "process_success=true" >> $GITHUB_OUTPUT
            echo "has_tasks=false" >> $GITHUB_OUTPUT
            
            {
              echo "### Delta Tasks Processing Summary"
              echo "- **Total delta tasks:** 0"
              echo "- **Successfully merged:** 0"
              echo "- **Failed:** 0"
              echo "- **Status:** ⚠️ No tasks to process"
            } >> "$GITHUB_STEP_SUMMARY"
            
            rm -f /tmp/clickup_delta_response.json
            exit 0
          fi

          # Process delta tasks - CRITICAL FIX: Capture only the final result line
          echo "🔍 Debug: Calling process_tasks with: '$DELTA_TASK_DATA'"
          DELTA_RESULT=$(process_tasks "$DELTA_TASK_DATA" "delta" "$DELTA_BRANCH_NAME" | tail -1)
          echo "🔍 Debug: DELTA_RESULT = '$DELTA_RESULT'"

          # Parse results
          IFS=':' read -r merged_count total_tasks failed_count failed_tasks_str <<< "$DELTA_RESULT"
          echo "🔍 Debug: parsed merged_count='$merged_count', total_tasks='$total_tasks', failed_count='$failed_count', failed_tasks_str='$failed_tasks_str'"

          # Validate parsed values
          if [ -z "$merged_count" ] || [ -z "$total_tasks" ] || [ -z "$failed_count" ]; then
            echo "❌ Error: Failed to parse DELTA_RESULT properly"
            echo "🔍 Debug: merged_count='$merged_count', total_tasks='$total_tasks', failed_count='$failed_count'"
            echo "process_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Additional validation: ensure values are numeric
          if ! [[ "$merged_count" =~ ^[0-9]+$ ]] || ! [[ "$total_tasks" =~ ^[0-9]+$ ]] || ! [[ "$failed_count" =~ ^[0-9]+$ ]]; then
            echo "❌ Error: Parsed values are not numeric"
            echo "🔍 Debug: merged_count='$merged_count', total_tasks='$total_tasks', failed_count='$failed_count'"
            echo "process_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Set outputs
          echo "merged_count=$merged_count" >> $GITHUB_OUTPUT
          echo "total_tasks=$total_tasks" >> $GITHUB_OUTPUT
          echo "failed_count=$failed_count" >> $GITHUB_OUTPUT
          echo "failed_tasks_str=$failed_tasks_str" >> $GITHUB_OUTPUT
          echo "all_tasks_merged=$([[ $merged_count -eq $total_tasks && $total_tasks -gt 0 ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "process_success=$([[ $failed_count -eq 0 || $merged_count -gt 0 ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "has_tasks=$([[ $total_tasks -gt 0 ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

          # Add to step summary
          {
            echo "### Delta Tasks Processing Summary"
            echo "- **Total delta tasks:** $total_tasks"
            echo "- **Successfully merged:** $merged_count"
            echo "- **Failed:** $failed_count"
            echo "- **Status:** $([[ $merged_count -eq $total_tasks && $total_tasks -gt 0 ]] && echo "✅ All tasks merged" || echo "⚠️ Partial success or no tasks")"
            
            # Add failed tasks details if any
            if [ -n "$failed_tasks_str" ] && [ "$failed_count" -gt 0 ]; then
              echo ""
              echo "**❌ Failed Tasks:**"
              IFS='|' read -ra failed_tasks <<< "$failed_tasks_str"
              for task in "${failed_tasks[@]}"; do
                echo "   - $task"
              done
            fi
          } >> "$GITHUB_STEP_SUMMARY"

          # Move delta tag if no errors and at least one merge
          move_tag_if_successful "$merged_count" "$failed_count" "delta" "$DELTA_BRANCH_NAME" "delta"

          # Clean up
          rm -f /tmp/clickup_delta_response.json

      - name: Notify Delta Merge Error
        if: failure() && steps.process_delta.outputs.process_success == 'false'
        uses: ./.github/actions/notify-chat
        with:
          name: "Delta Merge Error"
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
          type: "error"
          branch_type: "delta"
          branch_name: ${{ steps.create_delta.outputs.branch_name }}
          failed_tasks: ${{ steps.process_delta.outputs.failed_tasks_str }}

      - name: Notify Delta Merge Success
        if: steps.process_delta.outputs.process_success == 'true' && steps.process_delta.outputs.merged_count > 0
        uses: ./.github/actions/notify-chat
        with:
          name: "Delta Merge Success"
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
          type: "success"
          branch_type: "delta"
          branch_name: ${{ steps.create_delta.outputs.branch_name }}
          merged_count: ${{ steps.process_delta.outputs.merged_count }}
          total_tasks: ${{ steps.process_delta.outputs.total_tasks }}
          tag_moved: ${{ steps.process_delta.outputs.delta_tag_moved == 'true' && 'Yes (delta)' || 'No' }}

      - name: Generate Final Summary
        if: always()
        run: |
          # Collect all the status information
          BETA_HAS_TASKS="${{ steps.process_beta.outputs.has_tasks }}"
          BETA_MERGED="${{ steps.process_beta.outputs.merged_count }}"
          BETA_TOTAL="${{ steps.process_beta.outputs.total_tasks }}"
          BETA_ALL_MERGED="${{ steps.process_beta.outputs.all_tasks_merged }}"
          BETA_FAILED_TASKS="${{ steps.process_beta.outputs.failed_tasks_str }}"

          DELTA_CREATED="${{ steps.create_delta.outputs.branch_created }}"
          DELTA_EXISTS="${{ steps.create_delta.outputs.branch_exists }}"
          DELTA_HAS_TASKS="${{ steps.process_delta.outputs.has_tasks }}"
          DELTA_MERGED="${{ steps.process_delta.outputs.merged_count }}"
          DELTA_TOTAL="${{ steps.process_delta.outputs.total_tasks }}"
          DELTA_FAILED_TASKS="${{ steps.process_delta.outputs.failed_tasks_str }}"

          # Tag movement status from individual steps
          BETA_TAG_MOVED="${{ steps.process_beta.outputs.beta_tag_moved }}"
          DELTA_TAG_MOVED="${{ steps.process_delta.outputs.delta_tag_moved }}"

          echo "📋 Final Status Summary:"
            echo "   Beta branch: $BETA_BRANCH"
            echo "   Delta branch: $DELTA_BRANCH"
            echo "   Beta tasks: $BETA_MERGED/$BETA_TOTAL"
            echo "   Delta tasks: $DELTA_MERGED/$DELTA_TOTAL"
            if [ "$BETA_TAG_MOVED" = "true" ]; then
              echo "   Beta tag moved: beta"
            fi
            if [ "$DELTA_TAG_MOVED" = "true" ]; then
              echo "   Delta tag moved: delta"
            fi

          # Generate comprehensive summary
          {
            echo "## 📊 Weekly Branch Creation Summary"
            echo ""
            echo "**🔵 Beta Branch:** \`$BETA_BRANCH\`"
            
            if [ "$DELTA_CREATED" = "true" ] || [ "$DELTA_EXISTS" = "true" ]; then
              echo "**🟡 Delta Branch:** \`$DELTA_BRANCH\`"
            fi
            
            if [ "$BETA_TAG_MOVED" = "true" ]; then
              echo "**🏷️ Beta Tag:** \`beta\` (moved to current commit)"
            fi
            if [ "$DELTA_TAG_MOVED" = "true" ]; then
              echo "**🏷️ Delta Tag:** \`delta\` (moved to current commit)"
            fi
            
            echo ""
            
            # Determine overall status
            if [ "$BETA_HAS_TASKS" = "false" ] && [ "$DELTA_HAS_TASKS" = "false" ]; then
              echo "✅ **Status:** No tasks to process (normal situation)"
            elif [ "$BETA_ALL_MERGED" = "true" ] && [ "$DELTA_CREATED" = "true" ]; then
              echo "🎉 **Status:** Perfect! All beta tasks merged, delta branch created"
              if [ "$BETA_TAG_MOVED" = "true" ]; then
                echo "🏷️ **Beta Tag:** \`beta\` tag moved to current commit"
              fi
              if [ "$DELTA_TAG_MOVED" = "true" ]; then
                echo "🏷️ **Delta Tag:** \`delta\` tag moved to current commit"
              fi
              if [ "$DELTA_HAS_TASKS" = "true" ]; then
                echo "🚀 **Bonus:** Delta tasks also processed ($DELTA_MERGED/$DELTA_TOTAL)"
              fi
            elif [ "$BETA_ALL_MERGED" = "true" ]; then
              echo "✅ **Status:** All beta tasks merged successfully"
            elif [ "$BETA_HAS_TASKS" = "true" ] && [ "${BETA_MERGED:-0}" -gt 0 ]; then
              echo "⚠️ **Status:** Partial beta success ($BETA_MERGED/$BETA_TOTAL tasks merged)"
            elif [ "$DELTA_HAS_TASKS" = "true" ] && [ "${DELTA_MERGED:-0}" -gt 0 ]; then
              echo "⚠️ **Status:** Delta tasks processed ($DELTA_MERGED/$DELTA_TOTAL tasks merged)"
            else
              echo "❌ **Status:** Task processing failed"
            fi
            
            echo ""
            echo "**🕐 Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            
            echo ""
            echo "---"
            echo "### 📈 Statistics"
            echo "| Branch Type | Tasks Found | Successfully Merged | Success Rate |"
            echo "|-------------|-------------|---------------------|--------------|"
            echo "| Beta | ${BETA_TOTAL:-0} | ${BETA_MERGED:-0} | $([[ ${BETA_TOTAL:-0} -gt 0 ]] && echo "$(( (${BETA_MERGED:-0} * 100) / ${BETA_TOTAL:-0} ))%" || echo "N/A") |"
            if [ "$DELTA_HAS_TASKS" = "true" ]; then
              echo "| Delta | ${DELTA_TOTAL:-0} | ${DELTA_MERGED:-0} | $([[ ${DELTA_TOTAL:-0} -gt 0 ]] && echo "$(( (${DELTA_MERGED:-0} * 100) / ${DELTA_TOTAL:-0} ))%" || echo "N/A") |"
            fi
            
            # Add failed tasks summary if any
            if [ -n "$BETA_FAILED_TASKS" ] || [ -n "$DELTA_FAILED_TASKS" ]; then
              echo ""
              echo "### ❌ Failed Tasks Summary"
              if [ -n "$BETA_FAILED_TASKS" ]; then
                echo "**🔵 Beta Branch Failed Tasks:**"
                IFS='|' read -ra failed_tasks <<< "$BETA_FAILED_TASKS"
                for task in "${failed_tasks[@]}"; do
                  echo "- $task"
                done
                echo ""
              fi
              
              if [ -n "$DELTA_FAILED_TASKS" ]; then
                echo "**🟡 Delta Branch Failed Tasks:**"
                IFS='|' read -ra failed_tasks <<< "$DELTA_FAILED_TASKS"
                for task in "${failed_tasks[@]}"; do
                  echo "- $task"
                done
              fi
            fi
          } >> $GITHUB_STEP_SUMMARY

          # Clean up temporary files
          rm -f /tmp/common_functions.sh

          # Determine final exit code
          BETA_SUCCESS="${{ steps.process_beta.outputs.process_success }}"
          DELTA_SUCCESS="${{ steps.process_delta.outputs.process_success }}"

          if [ "$BETA_HAS_TASKS" = "true" ] && [ "$BETA_SUCCESS" = "false" ]; then
            echo "::error::❌ Beta task processing failed"         
            exit 1
          elif [ "$DELTA_HAS_TASKS" = "true" ] && [ "$DELTA_SUCCESS" = "false" ]; then
            echo "::error::❌ Delta task processing failed"       
            exit 1
          else
            echo "✅ Workflow completed successfully"
            exit 0
          fi

